
Car Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00000c08  00000c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000c2  008000c2  00000cfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000225a  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b97  00000000  00000000  0000315e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba0  00000000  00000000  00003cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00004898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e6  00000000  00000000  00004b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c80  00000000  00000000  0000544e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000060ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3c       	cpi	r26, 0xC2	; 194
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ec       	ldi	r26, 0xC2	; 194
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3c       	cpi	r26, 0xC4	; 196
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 02 	call	0x558	; 0x558 <main>
  8a:	0c 94 02 06 	jmp	0xc04	; 0xc04 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DcMotorR_Init>:


void DcMotorR_Init(void)
{
	/* !Comment: Initialize the DC Motor direction selection Pins */
	Dio_ChannelDirectionSet(DC_MOTOR_R_DIR_REG, DC_MOTOR_R_IN1_PIN, DIO_OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	65 e0       	ldi	r22, 0x05	; 5
  96:	84 e3       	ldi	r24, 0x34	; 52
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(DC_MOTOR_R_DIR_REG, DC_MOTOR_R_IN2_PIN, DIO_OUTPUT);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	66 e0       	ldi	r22, 0x06	; 6
  a2:	84 e3       	ldi	r24, 0x34	; 52
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(DC_MOTOR_R_EN_DIR_REG, DC_MOTOR_R_EN_PIN, DIO_OUTPUT);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	65 e0       	ldi	r22, 0x05	; 5
  ae:	81 e3       	ldi	r24, 0x31	; 49
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Dio_ChannelDirectionSet>
	/* !Comment: Initialize PWM module */
	Pwm_Init(&gStrPwm_Configuration[PWM_CHANNEL_1]);
  b6:	8a e6       	ldi	r24, 0x6A	; 106
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Pwm_Init>
  be:	08 95       	ret

000000c0 <DcMotorR_Control>:
}
void DcMotorR_Control(DcMotor_RotationDirType Dir, DcMotor_SpeedType Speed)
{
  c0:	cf 93       	push	r28
  c2:	c6 2f       	mov	r28, r22
	switch(Dir)
  c4:	88 23       	and	r24, r24
  c6:	19 f0       	breq	.+6      	; 0xce <DcMotorR_Control+0xe>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	71 f0       	breq	.+28     	; 0xe8 <DcMotorR_Control+0x28>
  cc:	19 c0       	rjmp	.+50     	; 0x100 <DcMotorR_Control+0x40>
	{
		case DC_MOTOR_TURN_CW:
		Dio_ChannelWrite(DC_MOTOR_R_OUT_REG, DC_MOTOR_R_IN1_PIN, DIO_HIGH);
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	65 e0       	ldi	r22, 0x05	; 5
  d2:	85 e3       	ldi	r24, 0x35	; 53
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
		Dio_ChannelWrite(DC_MOTOR_R_OUT_REG, DC_MOTOR_R_IN2_PIN, DIO_LOW);
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	85 e3       	ldi	r24, 0x35	; 53
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
		break;
  e6:	0c c0       	rjmp	.+24     	; 0x100 <DcMotorR_Control+0x40>
		case DC_MOTOR_TURN_CCW:
		Dio_ChannelWrite(DC_MOTOR_R_OUT_REG, DC_MOTOR_R_IN1_PIN, DIO_LOW);
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	65 e0       	ldi	r22, 0x05	; 5
  ec:	85 e3       	ldi	r24, 0x35	; 53
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
		Dio_ChannelWrite(DC_MOTOR_R_OUT_REG, DC_MOTOR_R_IN2_PIN, DIO_HIGH);
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	66 e0       	ldi	r22, 0x06	; 6
  f8:	85 e3       	ldi	r24, 0x35	; 53
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
		break;
		default:
		break;
	}
	switch(Speed)
 100:	c1 30       	cpi	r28, 0x01	; 1
 102:	51 f0       	breq	.+20     	; 0x118 <DcMotorR_Control+0x58>
 104:	18 f0       	brcs	.+6      	; 0x10c <DcMotorR_Control+0x4c>
 106:	c2 30       	cpi	r28, 0x02	; 2
 108:	69 f0       	breq	.+26     	; 0x124 <DcMotorR_Control+0x64>
 10a:	11 c0       	rjmp	.+34     	; 0x12e <DcMotorR_Control+0x6e>
	{
		case DC_MOTOR_SPEED_LOW:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 20U);
 10c:	64 e1       	ldi	r22, 0x14	; 20
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 cc 03 	call	0x798	; 0x798 <Pwm_SetDutyCycle>
		break;
 116:	0b c0       	rjmp	.+22     	; 0x12e <DcMotorR_Control+0x6e>
		case DC_MOTOR_SPEED_MID:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 50U);
 118:	62 e3       	ldi	r22, 0x32	; 50
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 cc 03 	call	0x798	; 0x798 <Pwm_SetDutyCycle>
		break;
 122:	05 c0       	rjmp	.+10     	; 0x12e <DcMotorR_Control+0x6e>
		case DC_MOTOR_SPEED_HIGH:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 90U);
 124:	6a e5       	ldi	r22, 0x5A	; 90
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 cc 03 	call	0x798	; 0x798 <Pwm_SetDutyCycle>
		break;
		default:
		break;
	}
}
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <DcMotorL_Init>:

void DcMotorL_Init(void)
{
	/* !Comment: Initialize the DC Motor direction selection Pins */
	Dio_ChannelDirectionSet(DC_MOTOR_L_DIR_REG, DC_MOTOR_L_IN1_PIN, DIO_OUTPUT);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	63 e0       	ldi	r22, 0x03	; 3
 136:	84 e3       	ldi	r24, 0x34	; 52
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(DC_MOTOR_L_DIR_REG, DC_MOTOR_L_IN2_PIN, DIO_OUTPUT);
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	64 e0       	ldi	r22, 0x04	; 4
 142:	84 e3       	ldi	r24, 0x34	; 52
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(DC_MOTOR_L_EN_DIR_REG, DC_MOTOR_L_EN_PIN, DIO_OUTPUT);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	64 e0       	ldi	r22, 0x04	; 4
 14e:	81 e3       	ldi	r24, 0x31	; 49
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Dio_ChannelDirectionSet>
	/* !Comment: Initialize PWM module */
	Pwm_Init(&gStrPwm_Configuration[PWM_CHANNEL_1]);
 156:	8a e6       	ldi	r24, 0x6A	; 106
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Pwm_Init>
 15e:	08 95       	ret

00000160 <DcMotorL_Control>:
}
void DcMotorL_Control(DcMotor_RotationDirType Dir, DcMotor_SpeedType Speed)
{
 160:	cf 93       	push	r28
 162:	c6 2f       	mov	r28, r22
	switch(Dir)
 164:	88 23       	and	r24, r24
 166:	19 f0       	breq	.+6      	; 0x16e <DcMotorL_Control+0xe>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	71 f0       	breq	.+28     	; 0x188 <DcMotorL_Control+0x28>
 16c:	19 c0       	rjmp	.+50     	; 0x1a0 <DcMotorL_Control+0x40>
	{
		case DC_MOTOR_TURN_CW:
		Dio_ChannelWrite(DC_MOTOR_L_OUT_REG, DC_MOTOR_L_IN1_PIN, DIO_HIGH);
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	63 e0       	ldi	r22, 0x03	; 3
 172:	85 e3       	ldi	r24, 0x35	; 53
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
		Dio_ChannelWrite(DC_MOTOR_L_OUT_REG, DC_MOTOR_L_IN2_PIN, DIO_LOW);
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	64 e0       	ldi	r22, 0x04	; 4
 17e:	85 e3       	ldi	r24, 0x35	; 53
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
		break;
 186:	0c c0       	rjmp	.+24     	; 0x1a0 <DcMotorL_Control+0x40>
		case DC_MOTOR_TURN_CCW:
		Dio_ChannelWrite(DC_MOTOR_L_OUT_REG, DC_MOTOR_L_IN1_PIN, DIO_LOW);
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	85 e3       	ldi	r24, 0x35	; 53
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
		Dio_ChannelWrite(DC_MOTOR_L_OUT_REG, DC_MOTOR_L_IN2_PIN, DIO_HIGH);
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	85 e3       	ldi	r24, 0x35	; 53
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
		break;
		default:
		break;
	}
	switch(Speed)
 1a0:	c1 30       	cpi	r28, 0x01	; 1
 1a2:	51 f0       	breq	.+20     	; 0x1b8 <DcMotorL_Control+0x58>
 1a4:	18 f0       	brcs	.+6      	; 0x1ac <DcMotorL_Control+0x4c>
 1a6:	c2 30       	cpi	r28, 0x02	; 2
 1a8:	69 f0       	breq	.+26     	; 0x1c4 <DcMotorL_Control+0x64>
 1aa:	11 c0       	rjmp	.+34     	; 0x1ce <DcMotorL_Control+0x6e>
	{
		case DC_MOTOR_SPEED_LOW:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 20U);
 1ac:	64 e1       	ldi	r22, 0x14	; 20
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 cc 03 	call	0x798	; 0x798 <Pwm_SetDutyCycle>
		break;
 1b6:	0b c0       	rjmp	.+22     	; 0x1ce <DcMotorL_Control+0x6e>
		case DC_MOTOR_SPEED_MID:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 50U);
 1b8:	62 e3       	ldi	r22, 0x32	; 50
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 cc 03 	call	0x798	; 0x798 <Pwm_SetDutyCycle>
		break;
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <DcMotorL_Control+0x6e>
		case DC_MOTOR_SPEED_HIGH:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 90U);
 1c4:	6a e5       	ldi	r22, 0x5A	; 90
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 cc 03 	call	0x798	; 0x798 <Pwm_SetDutyCycle>
		break;
		default:
		break;
	}
}
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <Forward>:

void Forward(void)
{
	DcMotorR_Control(DC_MOTOR_TURN_CW, DC_MOTOR_SPEED_MID);
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 60 00 	call	0xc0	; 0xc0 <DcMotorR_Control>
	DcMotorL_Control(DC_MOTOR_TURN_CW, DC_MOTOR_SPEED_MID);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 b0 00 	call	0x160	; 0x160 <DcMotorL_Control>
	
	LCD_StringDisplay("Moving Forward");
 1e2:	8e e7       	ldi	r24, 0x7E	; 126
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_StringDisplay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	89 e6       	ldi	r24, 0x69	; 105
 1ee:	98 e1       	ldi	r25, 0x18	; 24
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <Forward+0x1e>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <Forward+0x28>
 1fa:	00 00       	nop
	_delay_ms(500);
	LCD_Clear();
 1fc:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Clear>
 200:	08 95       	ret

00000202 <Backward>:
}
void Backward(void)
{
	DcMotorR_Control(DC_MOTOR_TURN_CCW, DC_MOTOR_SPEED_MID);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 60 00 	call	0xc0	; 0xc0 <DcMotorR_Control>
	DcMotorL_Control(DC_MOTOR_TURN_CCW, DC_MOTOR_SPEED_MID);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 b0 00 	call	0x160	; 0x160 <DcMotorL_Control>
	
	LCD_StringDisplay("Moving Backward");
 212:	8d e8       	ldi	r24, 0x8D	; 141
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_StringDisplay>
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	89 e6       	ldi	r24, 0x69	; 105
 21e:	98 e1       	ldi	r25, 0x18	; 24
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <Backward+0x1e>
 228:	00 c0       	rjmp	.+0      	; 0x22a <Backward+0x28>
 22a:	00 00       	nop
	_delay_ms(500);
	LCD_Clear();
 22c:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Clear>
 230:	08 95       	ret

00000232 <Left>:
}
void Left(void)
{
	DcMotorR_Control(DC_MOTOR_TURN_CW, DC_MOTOR_SPEED_MID);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 60 00 	call	0xc0	; 0xc0 <DcMotorR_Control>
	DcMotorL_Control(DC_MOTOR_TURN_CCW, DC_MOTOR_SPEED_MID);
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 b0 00 	call	0x160	; 0x160 <DcMotorL_Control>
	
	LCD_StringDisplay("Turning Left");
 242:	8d e9       	ldi	r24, 0x9D	; 157
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_StringDisplay>
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	89 e6       	ldi	r24, 0x69	; 105
 24e:	98 e1       	ldi	r25, 0x18	; 24
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <Left+0x1e>
 258:	00 c0       	rjmp	.+0      	; 0x25a <Left+0x28>
 25a:	00 00       	nop
	_delay_ms(500);
	LCD_Clear();
 25c:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Clear>
 260:	08 95       	ret

00000262 <Right>:
}
void Right(void)
{
	DcMotorR_Control(DC_MOTOR_TURN_CCW, DC_MOTOR_SPEED_MID);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 60 00 	call	0xc0	; 0xc0 <DcMotorR_Control>
	DcMotorL_Control(DC_MOTOR_TURN_CW, DC_MOTOR_SPEED_MID);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 b0 00 	call	0x160	; 0x160 <DcMotorL_Control>
	
	LCD_StringDisplay("Turning Right");
 272:	8a ea       	ldi	r24, 0xAA	; 170
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_StringDisplay>
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	89 e6       	ldi	r24, 0x69	; 105
 27e:	98 e1       	ldi	r25, 0x18	; 24
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <Right+0x1e>
 288:	00 c0       	rjmp	.+0      	; 0x28a <Right+0x28>
 28a:	00 00       	nop
	_delay_ms(500);
	LCD_Clear();
 28c:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Clear>
 290:	08 95       	ret

00000292 <Stop>:
}

void Stop(void)
{
	Dio_ChannelWrite(DC_MOTOR_L_OUT_REG, DC_MOTOR_L_IN1_PIN, DIO_LOW);
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	85 e3       	ldi	r24, 0x35	; 53
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
	Dio_ChannelWrite(DC_MOTOR_L_OUT_REG, DC_MOTOR_L_IN2_PIN, DIO_LOW);
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	64 e0       	ldi	r22, 0x04	; 4
 2a2:	85 e3       	ldi	r24, 0x35	; 53
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
	Pwm_SetDutyCycle(PWM_CHANNEL_1, 0);
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 cc 03 	call	0x798	; 0x798 <Pwm_SetDutyCycle>
	
	LCD_StringDisplay("Stopping");
 2b4:	88 eb       	ldi	r24, 0xB8	; 184
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_StringDisplay>
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	89 e6       	ldi	r24, 0x69	; 105
 2c0:	98 e1       	ldi	r25, 0x18	; 24
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <Stop+0x30>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <Stop+0x3a>
 2cc:	00 00       	nop
	_delay_ms(500);
	LCD_Clear();
 2ce:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Clear>
 2d2:	08 95       	ret

000002d4 <DcMotors_Speed_Control>:
}
void DcMotors_Speed_Control(DcMotor_SpeedType Speed){
	
	Pwm_SetDutyCycle(PWM_CHANNEL_1, Speed);
 2d4:	68 2f       	mov	r22, r24
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 cc 03 	call	0x798	; 0x798 <Pwm_SetDutyCycle>
 2de:	08 95       	ret

000002e0 <Dio_ChannelDirectionSet>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
	return (u8LocalPinValue);
}
 2e0:	44 23       	and	r20, r20
 2e2:	19 f0       	breq	.+6      	; 0x2ea <Dio_ChannelDirectionSet+0xa>
 2e4:	41 30       	cpi	r20, 0x01	; 1
 2e6:	71 f0       	breq	.+28     	; 0x304 <Dio_ChannelDirectionSet+0x24>
 2e8:	08 95       	ret
 2ea:	fc 01       	movw	r30, r24
 2ec:	40 81       	ld	r20, Z
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <Dio_ChannelDirectionSet+0x18>
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <Dio_ChannelDirectionSet+0x14>
 2fc:	20 95       	com	r18
 2fe:	24 23       	and	r18, r20
 300:	20 83       	st	Z, r18
 302:	08 95       	ret
 304:	fc 01       	movw	r30, r24
 306:	40 81       	ld	r20, Z
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <Dio_ChannelDirectionSet+0x32>
 30e:	22 0f       	add	r18, r18
 310:	33 1f       	adc	r19, r19
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <Dio_ChannelDirectionSet+0x2e>
 316:	24 2b       	or	r18, r20
 318:	20 83       	st	Z, r18
 31a:	08 95       	ret

0000031c <Dio_ChannelWrite>:

void Dio_ChannelWrite(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinStateEnum_t State)
{
	switch(State)
 31c:	44 23       	and	r20, r20
 31e:	19 f0       	breq	.+6      	; 0x326 <Dio_ChannelWrite+0xa>
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	71 f0       	breq	.+28     	; 0x340 <Dio_ChannelWrite+0x24>
 324:	08 95       	ret
	{
		case DIO_LOW:
		CLEAR_BIT(*Port_reg,Channel);
 326:	fc 01       	movw	r30, r24
 328:	40 81       	ld	r20, Z
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <Dio_ChannelWrite+0x18>
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <Dio_ChannelWrite+0x14>
 338:	20 95       	com	r18
 33a:	24 23       	and	r18, r20
 33c:	20 83       	st	Z, r18
		break;
 33e:	08 95       	ret
		case DIO_HIGH:
		SET_BIT(*Port_reg,Channel);
 340:	fc 01       	movw	r30, r24
 342:	40 81       	ld	r20, Z
 344:	21 e0       	ldi	r18, 0x01	; 1
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <Dio_ChannelWrite+0x32>
 34a:	22 0f       	add	r18, r18
 34c:	33 1f       	adc	r19, r19
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <Dio_ChannelWrite+0x2e>
 352:	24 2b       	or	r18, r20
 354:	20 83       	st	Z, r18
 356:	08 95       	ret

00000358 <LCD_Send_Instruction>:
		u8LocalLineAddress = Col | LCD_4TH_LINE_BASE;
		break;
		default:
		break;
	}
	LCD_Send_Instruction(LCD_DDRAM_CONST | u8LocalLineAddress);
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	88 e3       	ldi	r24, 0x38	; 56
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	62 e0       	ldi	r22, 0x02	; 2
 36c:	88 e3       	ldi	r24, 0x38	; 56
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
 374:	8f e9       	ldi	r24, 0x9F	; 159
 376:	9f e0       	ldi	r25, 0x0F	; 15
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <LCD_Send_Instruction+0x20>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_Send_Instruction+0x26>
 37e:	00 00       	nop
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	63 e0       	ldi	r22, 0x03	; 3
 384:	88 e3       	ldi	r24, 0x38	; 56
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
 38c:	8f e9       	ldi	r24, 0x9F	; 159
 38e:	9f e0       	ldi	r25, 0x0F	; 15
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_Send_Instruction+0x38>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_Send_Instruction+0x3e>
 396:	00 00       	nop
 398:	8b b3       	in	r24, 0x1b	; 27
 39a:	8f 70       	andi	r24, 0x0F	; 15
 39c:	8b bb       	out	0x1b, r24	; 27
 39e:	8b b3       	in	r24, 0x1b	; 27
 3a0:	9c 2f       	mov	r25, r28
 3a2:	90 7f       	andi	r25, 0xF0	; 240
 3a4:	89 2b       	or	r24, r25
 3a6:	8b bb       	out	0x1b, r24	; 27
 3a8:	8f e9       	ldi	r24, 0x9F	; 159
 3aa:	9f e0       	ldi	r25, 0x0F	; 15
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_Send_Instruction+0x54>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_Send_Instruction+0x5a>
 3b2:	00 00       	nop
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	63 e0       	ldi	r22, 0x03	; 3
 3b8:	88 e3       	ldi	r24, 0x38	; 56
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
 3c0:	8f e9       	ldi	r24, 0x9F	; 159
 3c2:	9f e0       	ldi	r25, 0x0F	; 15
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_Send_Instruction+0x6c>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_Send_Instruction+0x72>
 3ca:	00 00       	nop
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	63 e0       	ldi	r22, 0x03	; 3
 3d0:	88 e3       	ldi	r24, 0x38	; 56
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
 3d8:	8f e9       	ldi	r24, 0x9F	; 159
 3da:	9f e0       	ldi	r25, 0x0F	; 15
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_Send_Instruction+0x84>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_Send_Instruction+0x8a>
 3e2:	00 00       	nop
 3e4:	8b b3       	in	r24, 0x1b	; 27
 3e6:	8f 70       	andi	r24, 0x0F	; 15
 3e8:	8b bb       	out	0x1b, r24	; 27
 3ea:	8b b3       	in	r24, 0x1b	; 27
 3ec:	c2 95       	swap	r28
 3ee:	c0 7f       	andi	r28, 0xF0	; 240
 3f0:	c8 2b       	or	r28, r24
 3f2:	cb bb       	out	0x1b, r28	; 27
 3f4:	8f e9       	ldi	r24, 0x9F	; 159
 3f6:	9f e0       	ldi	r25, 0x0F	; 15
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_Send_Instruction+0xa0>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_Send_Instruction+0xa6>
 3fe:	00 00       	nop
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	63 e0       	ldi	r22, 0x03	; 3
 404:	88 e3       	ldi	r24, 0x38	; 56
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
 40c:	8f e9       	ldi	r24, 0x9F	; 159
 40e:	9f e0       	ldi	r25, 0x0F	; 15
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <LCD_Init>:
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	89 ef       	ldi	r24, 0xF9	; 249
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	21 50       	subi	r18, 0x01	; 1
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <LCD_Init+0x6>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <LCD_Init+0x10>
 42c:	00 00       	nop
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	87 e3       	ldi	r24, 0x37	; 55
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Dio_ChannelDirectionSet>
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	87 e3       	ldi	r24, 0x37	; 55
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Dio_ChannelDirectionSet>
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	63 e0       	ldi	r22, 0x03	; 3
 44a:	87 e3       	ldi	r24, 0x37	; 55
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Dio_ChannelDirectionSet>
 452:	8a b3       	in	r24, 0x1a	; 26
 454:	80 6f       	ori	r24, 0xF0	; 240
 456:	8a bb       	out	0x1a, r24	; 26
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Send_Instruction>
 45e:	88 e2       	ldi	r24, 0x28	; 40
 460:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Send_Instruction>
 464:	8c e0       	ldi	r24, 0x0C	; 12
 466:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Send_Instruction>
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Send_Instruction>
 470:	08 95       	ret

00000472 <LCD_Clear>:
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Send_Instruction>
 478:	08 95       	ret

0000047a <LCD_CharDisplay>:
}
void LCD_CharDisplay(uint8 Data)
{
 47a:	cf 93       	push	r28
 47c:	c8 2f       	mov	r28, r24
	/* !Comment: RW  Should be 0  and RS should be 1 when Writing Data to LCD */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RS, DIO_HIGH);
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	88 e3       	ldi	r24, 0x38	; 56
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RW, DIO_LOW);
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	62 e0       	ldi	r22, 0x02	; 2
 48e:	88 e3       	ldi	r24, 0x38	; 56
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
 496:	8f e9       	ldi	r24, 0x9F	; 159
 498:	9f e0       	ldi	r25, 0x0F	; 15
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <LCD_CharDisplay+0x20>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <LCD_CharDisplay+0x26>
 4a0:	00 00       	nop
	/* !Comment: Delay of Address Set 60ns minimum */
	_delay_ms(1);
	/* !Comment: Enable LCD E=1 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 4a2:	41 e0       	ldi	r20, 0x01	; 1
 4a4:	63 e0       	ldi	r22, 0x03	; 3
 4a6:	88 e3       	ldi	r24, 0x38	; 56
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
 4ae:	8f e9       	ldi	r24, 0x9F	; 159
 4b0:	9f e0       	ldi	r25, 0x0F	; 15
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_CharDisplay+0x38>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_CharDisplay+0x3e>
 4b8:	00 00       	nop
	_delay_ms(1);
	#if LCD_EIGHTBIT_DATA
	Dio_PortWrite(LCD_DATA_OUT_REG, Data);
	#else
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
 4ba:	8b b3       	in	r24, 0x1b	; 27
 4bc:	8f 70       	andi	r24, 0x0F	; 15
 4be:	8b bb       	out	0x1b, r24	; 27
	*LCD_DATA_OUT_REG |= (Data & 0xF0U);
 4c0:	8b b3       	in	r24, 0x1b	; 27
 4c2:	9c 2f       	mov	r25, r28
 4c4:	90 7f       	andi	r25, 0xF0	; 240
 4c6:	89 2b       	or	r24, r25
 4c8:	8b bb       	out	0x1b, r24	; 27
 4ca:	8f e9       	ldi	r24, 0x9F	; 159
 4cc:	9f e0       	ldi	r25, 0x0F	; 15
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <LCD_CharDisplay+0x54>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <LCD_CharDisplay+0x5a>
 4d4:	00 00       	nop
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	63 e0       	ldi	r22, 0x03	; 3
 4da:	88 e3       	ldi	r24, 0x38	; 56
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
 4e2:	8f e9       	ldi	r24, 0x9F	; 159
 4e4:	9f e0       	ldi	r25, 0x0F	; 15
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LCD_CharDisplay+0x6c>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <LCD_CharDisplay+0x72>
 4ec:	00 00       	nop
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);

	/* !Comment: Enable LCD E=1  (To write the other 4-bit of the instruction)*/
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	63 e0       	ldi	r22, 0x03	; 3
 4f2:	88 e3       	ldi	r24, 0x38	; 56
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
 4fa:	8f e9       	ldi	r24, 0x9F	; 159
 4fc:	9f e0       	ldi	r25, 0x0F	; 15
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <LCD_CharDisplay+0x84>
 502:	00 c0       	rjmp	.+0      	; 0x504 <LCD_CharDisplay+0x8a>
 504:	00 00       	nop
	/* !Comment: Delay for processing PW min 450ns */
	_delay_ms(1);
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
 506:	8b b3       	in	r24, 0x1b	; 27
 508:	8f 70       	andi	r24, 0x0F	; 15
 50a:	8b bb       	out	0x1b, r24	; 27
	*LCD_DATA_OUT_REG |= ((Data << 4U) & 0xF0U);
 50c:	8b b3       	in	r24, 0x1b	; 27
 50e:	c2 95       	swap	r28
 510:	c0 7f       	andi	r28, 0xF0	; 240
 512:	c8 2b       	or	r28, r24
 514:	cb bb       	out	0x1b, r28	; 27
 516:	8f e9       	ldi	r24, 0x9F	; 159
 518:	9f e0       	ldi	r25, 0x0F	; 15
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <LCD_CharDisplay+0xa0>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <LCD_CharDisplay+0xa6>
 520:	00 00       	nop
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	63 e0       	ldi	r22, 0x03	; 3
 526:	88 e3       	ldi	r24, 0x38	; 56
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 8e 01 	call	0x31c	; 0x31c <Dio_ChannelWrite>
 52e:	8f e9       	ldi	r24, 0x9F	; 159
 530:	9f e0       	ldi	r25, 0x0F	; 15
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <LCD_CharDisplay+0xb8>
 536:	00 c0       	rjmp	.+0      	; 0x538 <LCD_CharDisplay+0xbe>
 538:	00 00       	nop
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);
	#endif
}
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <LCD_StringDisplay>:

void LCD_StringDisplay(char *Str)
{
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	ec 01       	movw	r28, r24
	while(*Str != '\0')
 544:	03 c0       	rjmp	.+6      	; 0x54c <LCD_StringDisplay+0xe>
	{
		LCD_CharDisplay(*Str);
 546:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_CharDisplay>
		Str++;
 54a:	21 96       	adiw	r28, 0x01	; 1
	#endif
}

void LCD_StringDisplay(char *Str)
{
	while(*Str != '\0')
 54c:	88 81       	ld	r24, Y
 54e:	81 11       	cpse	r24, r1
 550:	fa cf       	rjmp	.-12     	; 0x546 <LCD_StringDisplay+0x8>
	{
		LCD_CharDisplay(*Str);
		Str++;
	}
}
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <main>:

int main(void)
{
	uint8 ReceivedData;

	DcMotorR_Init();
 558:	0e 94 49 00 	call	0x92	; 0x92 <DcMotorR_Init>
	DcMotorL_Init();
 55c:	0e 94 99 00 	call	0x132	; 0x132 <DcMotorL_Init>
	LCD_Init();
 560:	0e 94 0e 02 	call	0x41c	; 0x41c <LCD_Init>
	UART_INIT();
 564:	0e 94 46 04 	call	0x88c	; 0x88c <UART_INIT>


	while (1)
	{
		ReceivedData = UART_Rx();
 568:	0e 94 53 04 	call	0x8a6	; 0x8a6 <UART_Rx>

		if(ReceivedData == 'l')
 56c:	8c 36       	cpi	r24, 0x6C	; 108
 56e:	19 f4       	brne	.+6      	; 0x576 <main+0x1e>
		{
			Left();
 570:	0e 94 19 01 	call	0x232	; 0x232 <Left>
 574:	f9 cf       	rjmp	.-14     	; 0x568 <main+0x10>
		}
		else if(ReceivedData == 'r')
 576:	82 37       	cpi	r24, 0x72	; 114
 578:	19 f4       	brne	.+6      	; 0x580 <main+0x28>
		{
			Right();
 57a:	0e 94 31 01 	call	0x262	; 0x262 <Right>
 57e:	f4 cf       	rjmp	.-24     	; 0x568 <main+0x10>
		}
		else if(ReceivedData == 'f')
 580:	86 36       	cpi	r24, 0x66	; 102
 582:	19 f4       	brne	.+6      	; 0x58a <main+0x32>
		{
			Forward();
 584:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Forward>
 588:	ef cf       	rjmp	.-34     	; 0x568 <main+0x10>
		}
		else if(ReceivedData == 'b')
 58a:	82 36       	cpi	r24, 0x62	; 98
 58c:	19 f4       	brne	.+6      	; 0x594 <main+0x3c>
		{
			Backward();
 58e:	0e 94 01 01 	call	0x202	; 0x202 <Backward>
 592:	ea cf       	rjmp	.-44     	; 0x568 <main+0x10>
		}
		else if(ReceivedData == 's')
 594:	83 37       	cpi	r24, 0x73	; 115
 596:	19 f4       	brne	.+6      	; 0x59e <main+0x46>
		{
			Stop();
 598:	0e 94 49 01 	call	0x292	; 0x292 <Stop>
 59c:	e5 cf       	rjmp	.-54     	; 0x568 <main+0x10>
		}
		else if(ReceivedData =='L')
 59e:	8c 34       	cpi	r24, 0x4C	; 76
 5a0:	21 f4       	brne	.+8      	; 0x5aa <main+0x52>
		{
			DcMotors_Speed_Control(40);
 5a2:	88 e2       	ldi	r24, 0x28	; 40
 5a4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DcMotors_Speed_Control>
 5a8:	df cf       	rjmp	.-66     	; 0x568 <main+0x10>
		}
		else if(ReceivedData =='H')
 5aa:	88 34       	cpi	r24, 0x48	; 72
 5ac:	e9 f6       	brne	.-70     	; 0x568 <main+0x10>
		{
			DcMotors_Speed_Control(95);
 5ae:	8f e5       	ldi	r24, 0x5F	; 95
 5b0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DcMotors_Speed_Control>
 5b4:	d9 cf       	rjmp	.-78     	; 0x568 <main+0x10>

000005b6 <Pwm_Init>:
#include "Macros.h"

uint16 gu16TimerTopValue = 0U;

void Pwm_Init(const Pwm_ConfigType *ConfigPtr)
{
 5b6:	cf 92       	push	r12
 5b8:	df 92       	push	r13
 5ba:	ef 92       	push	r14
 5bc:	ff 92       	push	r15
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	fc 01       	movw	r30, r24
	switch(ConfigPtr->PwmCh)
 5c8:	80 81       	ld	r24, Z
 5ca:	88 23       	and	r24, r24
 5cc:	19 f0       	breq	.+6      	; 0x5d4 <Pwm_Init+0x1e>
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	99 f1       	breq	.+102    	; 0x638 <Pwm_Init+0x82>
 5d2:	d9 c0       	rjmp	.+434    	; 0x786 <Pwm_Init+0x1d0>
	{
		case PWM_CHANNEL_0:
		/* !Comment: Clear Registers before applying configuration */
		*TIMER0_CTRL_REG = 0x00U;
 5d4:	13 be       	out	0x33, r1	; 51
		*TIMER0_COUNTER_REG = 0x00U;
 5d6:	12 be       	out	0x32, r1	; 50
		/* !Comment: Apply configuration */
		*TIMER0_CTRL_REG |= ConfigPtr->PwmClkDiv | ConfigPtr->PwmMode | ConfigPtr->PwmPolarity;
 5d8:	93 b7       	in	r25, 0x33	; 51
 5da:	33 81       	ldd	r19, Z+3	; 0x03
 5dc:	81 81       	ldd	r24, Z+1	; 0x01
 5de:	22 81       	ldd	r18, Z+2	; 0x02
 5e0:	83 2b       	or	r24, r19
 5e2:	82 2b       	or	r24, r18
 5e4:	89 2b       	or	r24, r25
 5e6:	83 bf       	out	0x33, r24	; 51
		switch(ConfigPtr->PwmPolarity)
 5e8:	82 81       	ldd	r24, Z+2	; 0x02
 5ea:	80 32       	cpi	r24, 0x20	; 32
 5ec:	b1 f0       	breq	.+44     	; 0x61a <Pwm_Init+0x64>
 5ee:	80 33       	cpi	r24, 0x30	; 48
 5f0:	09 f0       	breq	.+2      	; 0x5f4 <Pwm_Init+0x3e>
 5f2:	c9 c0       	rjmp	.+402    	; 0x786 <Pwm_Init+0x1d0>
		{
			case PWM_HIGH:
			*TIMER0_CMP_REG = (uint8) (((100U - ConfigPtr->PwmDuty) / 100U) * PWM0_RESOLUTION);
 5f4:	80 85       	ldd	r24, Z+8	; 0x08
 5f6:	91 85       	ldd	r25, Z+9	; 0x09
 5f8:	24 e6       	ldi	r18, 0x64	; 100
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	28 1b       	sub	r18, r24
 5fe:	39 0b       	sbc	r19, r25
 600:	36 95       	lsr	r19
 602:	27 95       	ror	r18
 604:	36 95       	lsr	r19
 606:	27 95       	ror	r18
 608:	ab e7       	ldi	r26, 0x7B	; 123
 60a:	b4 e1       	ldi	r27, 0x14	; 20
 60c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__umulhisi3>
 610:	96 95       	lsr	r25
 612:	87 95       	ror	r24
 614:	81 95       	neg	r24
 616:	8c bf       	out	0x3c, r24	; 60
			break;
 618:	b6 c0       	rjmp	.+364    	; 0x786 <Pwm_Init+0x1d0>
			case PWM_LOW:
			*TIMER0_CMP_REG = (uint8) ((ConfigPtr->PwmDuty / 100U) * PWM0_RESOLUTION);
 61a:	20 85       	ldd	r18, Z+8	; 0x08
 61c:	31 85       	ldd	r19, Z+9	; 0x09
 61e:	36 95       	lsr	r19
 620:	27 95       	ror	r18
 622:	36 95       	lsr	r19
 624:	27 95       	ror	r18
 626:	ab e7       	ldi	r26, 0x7B	; 123
 628:	b4 e1       	ldi	r27, 0x14	; 20
 62a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__umulhisi3>
 62e:	96 95       	lsr	r25
 630:	87 95       	ror	r24
 632:	81 95       	neg	r24
 634:	8c bf       	out	0x3c, r24	; 60
			break;
 636:	a7 c0       	rjmp	.+334    	; 0x786 <Pwm_Init+0x1d0>
			break;
		}
		break;
		case PWM_CHANNEL_1:
		/* !Comment: Clear Registers before applying configuration */
		*TIMER1_CTRL_A_REG = 0x00U;
 638:	1f bc       	out	0x2f, r1	; 47
		*TIMER1_CTRL_B_REG = 0x00U;
 63a:	1e bc       	out	0x2e, r1	; 46
		*(uint16 *)TIMER1_COUNTER_LOW_REG = 0x00U;
 63c:	1d bc       	out	0x2d, r1	; 45
 63e:	1c bc       	out	0x2c, r1	; 44
		/* !Comment: Apply configuration */
		switch(ConfigPtr->PwmMode)
 640:	81 81       	ldd	r24, Z+1	; 0x01
 642:	80 34       	cpi	r24, 0x40	; 64
 644:	79 f0       	breq	.+30     	; 0x664 <Pwm_Init+0xae>
 646:	88 34       	cpi	r24, 0x48	; 72
 648:	c9 f4       	brne	.+50     	; 0x67c <Pwm_Init+0xc6>
		{
			case PWM_MODE_FAST:
			CLEAR_BIT(*TIMER1_CTRL_A_REG, 0U);
 64a:	8f b5       	in	r24, 0x2f	; 47
 64c:	8e 7f       	andi	r24, 0xFE	; 254
 64e:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(*TIMER1_CTRL_A_REG, 1U);
 650:	8f b5       	in	r24, 0x2f	; 47
 652:	82 60       	ori	r24, 0x02	; 2
 654:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(*TIMER1_CTRL_B_REG, 3U);
 656:	8e b5       	in	r24, 0x2e	; 46
 658:	88 60       	ori	r24, 0x08	; 8
 65a:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(*TIMER1_CTRL_B_REG, 4U);
 65c:	8e b5       	in	r24, 0x2e	; 46
 65e:	80 61       	ori	r24, 0x10	; 16
 660:	8e bd       	out	0x2e, r24	; 46
			break;
 662:	0c c0       	rjmp	.+24     	; 0x67c <Pwm_Init+0xc6>
			case PWM_MODE_PHASE_CORRECT:
			SET_BIT(*TIMER1_CTRL_A_REG, 0U);
 664:	8f b5       	in	r24, 0x2f	; 47
 666:	81 60       	ori	r24, 0x01	; 1
 668:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(*TIMER1_CTRL_A_REG, 1U);
 66a:	8f b5       	in	r24, 0x2f	; 47
 66c:	82 60       	ori	r24, 0x02	; 2
 66e:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(*TIMER1_CTRL_B_REG, 3U);
 670:	8e b5       	in	r24, 0x2e	; 46
 672:	87 7f       	andi	r24, 0xF7	; 247
 674:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(*TIMER1_CTRL_B_REG, 4U);
 676:	8e b5       	in	r24, 0x2e	; 46
 678:	80 61       	ori	r24, 0x10	; 16
 67a:	8e bd       	out	0x2e, r24	; 46
 67c:	ef 01       	movw	r28, r30
			break;
			default:
			break;
		}
		/* !Comment: Set TOP ticks in ICR1 Register */
		gu16TimerTopValue = (uint16)(F_CPU / (ConfigPtr->PrescaleValue * (1000.0 / ConfigPtr->PwmPeriod))) - 1U;
 67e:	06 81       	ldd	r16, Z+6	; 0x06
 680:	17 81       	ldd	r17, Z+7	; 0x07
 682:	64 81       	ldd	r22, Z+4	; 0x04
 684:	75 81       	ldd	r23, Z+5	; 0x05
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatunsisf>
 68e:	9b 01       	movw	r18, r22
 690:	ac 01       	movw	r20, r24
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	8a e7       	ldi	r24, 0x7A	; 122
 698:	94 e4       	ldi	r25, 0x44	; 68
 69a:	0e 94 57 04 	call	0x8ae	; 0x8ae <__divsf3>
 69e:	6b 01       	movw	r12, r22
 6a0:	7c 01       	movw	r14, r24
 6a2:	b8 01       	movw	r22, r16
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatunsisf>
 6ac:	a7 01       	movw	r20, r14
 6ae:	96 01       	movw	r18, r12
 6b0:	0e 94 86 05 	call	0xb0c	; 0xb0c <__mulsf3>
 6b4:	9b 01       	movw	r18, r22
 6b6:	ac 01       	movw	r20, r24
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	74 e2       	ldi	r23, 0x24	; 36
 6bc:	84 e7       	ldi	r24, 0x74	; 116
 6be:	9b e4       	ldi	r25, 0x4B	; 75
 6c0:	0e 94 57 04 	call	0x8ae	; 0x8ae <__divsf3>
 6c4:	0e 94 c9 04 	call	0x992	; 0x992 <__fixunssfsi>
 6c8:	61 50       	subi	r22, 0x01	; 1
 6ca:	71 09       	sbc	r23, r1
 6cc:	70 93 c3 00 	sts	0x00C3, r23	; 0x8000c3 <__data_end+0x1>
 6d0:	60 93 c2 00 	sts	0x00C2, r22	; 0x8000c2 <__data_end>
		*(uint16*)TIMER1_INP_CAP_LOW_REG = (uint16)gu16TimerTopValue;
 6d4:	77 bd       	out	0x27, r23	; 39
 6d6:	66 bd       	out	0x26, r22	; 38

		switch(ConfigPtr->PwmPolarity)
 6d8:	8a 81       	ldd	r24, Y+2	; 0x02
 6da:	80 32       	cpi	r24, 0x20	; 32
 6dc:	61 f1       	breq	.+88     	; 0x736 <Pwm_Init+0x180>
 6de:	80 33       	cpi	r24, 0x30	; 48
 6e0:	09 f0       	breq	.+2      	; 0x6e4 <Pwm_Init+0x12e>
 6e2:	4d c0       	rjmp	.+154    	; 0x77e <Pwm_Init+0x1c8>
		{
			case PWM_HIGH:
			SET_BIT(*TIMER1_CTRL_A_REG, 6U);
 6e4:	8f b5       	in	r24, 0x2f	; 47
 6e6:	80 64       	ori	r24, 0x40	; 64
 6e8:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(*TIMER1_CTRL_A_REG, 7U);
 6ea:	8f b5       	in	r24, 0x2f	; 47
 6ec:	80 68       	ori	r24, 0x80	; 128
 6ee:	8f bd       	out	0x2f, r24	; 47
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) (((100U - ConfigPtr->PwmDuty) / 100.0) * gu16TimerTopValue);
 6f0:	88 85       	ldd	r24, Y+8	; 0x08
 6f2:	99 85       	ldd	r25, Y+9	; 0x09
 6f4:	64 e6       	ldi	r22, 0x64	; 100
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	68 1b       	sub	r22, r24
 6fa:	79 0b       	sbc	r23, r25
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatunsisf>
 704:	20 e0       	ldi	r18, 0x00	; 0
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	48 ec       	ldi	r20, 0xC8	; 200
 70a:	52 e4       	ldi	r21, 0x42	; 66
 70c:	0e 94 57 04 	call	0x8ae	; 0x8ae <__divsf3>
 710:	6b 01       	movw	r12, r22
 712:	7c 01       	movw	r14, r24
 714:	60 91 c2 00 	lds	r22, 0x00C2	; 0x8000c2 <__data_end>
 718:	70 91 c3 00 	lds	r23, 0x00C3	; 0x8000c3 <__data_end+0x1>
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatunsisf>
 724:	a7 01       	movw	r20, r14
 726:	96 01       	movw	r18, r12
 728:	0e 94 86 05 	call	0xb0c	; 0xb0c <__mulsf3>
 72c:	0e 94 c9 04 	call	0x992	; 0x992 <__fixunssfsi>
 730:	7b bd       	out	0x2b, r23	; 43
 732:	6a bd       	out	0x2a, r22	; 42
			break;
 734:	24 c0       	rjmp	.+72     	; 0x77e <Pwm_Init+0x1c8>
			case PWM_LOW:
			CLEAR_BIT(*TIMER1_CTRL_A_REG, 6U);
 736:	8f b5       	in	r24, 0x2f	; 47
 738:	8f 7b       	andi	r24, 0xBF	; 191
 73a:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(*TIMER1_CTRL_A_REG, 7U);
 73c:	8f b5       	in	r24, 0x2f	; 47
 73e:	80 68       	ori	r24, 0x80	; 128
 740:	8f bd       	out	0x2f, r24	; 47
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) ((ConfigPtr->PwmDuty / 100.0) * gu16TimerTopValue);
 742:	68 85       	ldd	r22, Y+8	; 0x08
 744:	79 85       	ldd	r23, Y+9	; 0x09
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatunsisf>
 74e:	20 e0       	ldi	r18, 0x00	; 0
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	48 ec       	ldi	r20, 0xC8	; 200
 754:	52 e4       	ldi	r21, 0x42	; 66
 756:	0e 94 57 04 	call	0x8ae	; 0x8ae <__divsf3>
 75a:	6b 01       	movw	r12, r22
 75c:	7c 01       	movw	r14, r24
 75e:	60 91 c2 00 	lds	r22, 0x00C2	; 0x8000c2 <__data_end>
 762:	70 91 c3 00 	lds	r23, 0x00C3	; 0x8000c3 <__data_end+0x1>
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatunsisf>
 76e:	a7 01       	movw	r20, r14
 770:	96 01       	movw	r18, r12
 772:	0e 94 86 05 	call	0xb0c	; 0xb0c <__mulsf3>
 776:	0e 94 c9 04 	call	0x992	; 0x992 <__fixunssfsi>
 77a:	7b bd       	out	0x2b, r23	; 43
 77c:	6a bd       	out	0x2a, r22	; 42
			break;
			default:
			break;
		}
		*TIMER1_CTRL_B_REG |= ConfigPtr->PwmClkDiv;
 77e:	9e b5       	in	r25, 0x2e	; 46
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	89 2b       	or	r24, r25
 784:	8e bd       	out	0x2e, r24	; 46
		case PWM_CHANNEL_2:
		break;
		default:
		break;
	}
}
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	ff 90       	pop	r15
 790:	ef 90       	pop	r14
 792:	df 90       	pop	r13
 794:	cf 90       	pop	r12
 796:	08 95       	ret

00000798 <Pwm_SetDutyCycle>:
void Pwm_SetDutyCycle(Pwm_ChannelType ChannelNumber, uint16 DutyCycle)
{
 798:	cf 92       	push	r12
 79a:	df 92       	push	r13
 79c:	ef 92       	push	r14
 79e:	ff 92       	push	r15
	switch(ChannelNumber)
 7a0:	88 23       	and	r24, r24
 7a2:	19 f0       	breq	.+6      	; 0x7aa <Pwm_SetDutyCycle+0x12>
 7a4:	81 30       	cpi	r24, 0x01	; 1
 7a6:	39 f1       	breq	.+78     	; 0x7f6 <Pwm_SetDutyCycle+0x5e>
 7a8:	6c c0       	rjmp	.+216    	; 0x882 <__stack+0x23>
	{
		case PWM_CHANNEL_0:
		switch(gStrPwm_Configuration->PwmPolarity)
 7aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 7ae:	80 32       	cpi	r24, 0x20	; 32
 7b0:	a1 f0       	breq	.+40     	; 0x7da <Pwm_SetDutyCycle+0x42>
 7b2:	80 33       	cpi	r24, 0x30	; 48
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <Pwm_SetDutyCycle+0x20>
 7b6:	65 c0       	rjmp	.+202    	; 0x882 <__stack+0x23>
		{
			case PWM_HIGH:
			*TIMER0_CMP_REG = (uint8) (((100U - DutyCycle) / 100U) * PWM0_RESOLUTION);
 7b8:	24 e6       	ldi	r18, 0x64	; 100
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	26 1b       	sub	r18, r22
 7be:	37 0b       	sbc	r19, r23
 7c0:	36 95       	lsr	r19
 7c2:	27 95       	ror	r18
 7c4:	36 95       	lsr	r19
 7c6:	27 95       	ror	r18
 7c8:	ab e7       	ldi	r26, 0x7B	; 123
 7ca:	b4 e1       	ldi	r27, 0x14	; 20
 7cc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__umulhisi3>
 7d0:	96 95       	lsr	r25
 7d2:	87 95       	ror	r24
 7d4:	81 95       	neg	r24
 7d6:	8c bf       	out	0x3c, r24	; 60
			break;
 7d8:	54 c0       	rjmp	.+168    	; 0x882 <__stack+0x23>
			case PWM_LOW:
			*TIMER0_CMP_REG = (uint8) ((DutyCycle / 100U) * PWM0_RESOLUTION);
 7da:	9b 01       	movw	r18, r22
 7dc:	36 95       	lsr	r19
 7de:	27 95       	ror	r18
 7e0:	36 95       	lsr	r19
 7e2:	27 95       	ror	r18
 7e4:	ab e7       	ldi	r26, 0x7B	; 123
 7e6:	b4 e1       	ldi	r27, 0x14	; 20
 7e8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__umulhisi3>
 7ec:	96 95       	lsr	r25
 7ee:	87 95       	ror	r24
 7f0:	81 95       	neg	r24
 7f2:	8c bf       	out	0x3c, r24	; 60
			break;
 7f4:	46 c0       	rjmp	.+140    	; 0x882 <__stack+0x23>
			default:
			break;
		}
		break;
		case PWM_CHANNEL_1:
		switch(gStrPwm_Configuration->PwmPolarity)
 7f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 7fa:	80 32       	cpi	r24, 0x20	; 32
 7fc:	31 f1       	breq	.+76     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 7fe:	80 33       	cpi	r24, 0x30	; 48
 800:	09 f0       	breq	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 802:	3f c0       	rjmp	.+126    	; 0x882 <__stack+0x23>
		{
			case PWM_HIGH:
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) (((100U - DutyCycle) / 100.0) * gu16TimerTopValue);
 804:	84 e6       	ldi	r24, 0x64	; 100
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	9c 01       	movw	r18, r24
 80a:	26 1b       	sub	r18, r22
 80c:	37 0b       	sbc	r19, r23
 80e:	b9 01       	movw	r22, r18
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatunsisf>
 818:	20 e0       	ldi	r18, 0x00	; 0
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	48 ec       	ldi	r20, 0xC8	; 200
 81e:	52 e4       	ldi	r21, 0x42	; 66
 820:	0e 94 57 04 	call	0x8ae	; 0x8ae <__divsf3>
 824:	6b 01       	movw	r12, r22
 826:	7c 01       	movw	r14, r24
 828:	60 91 c2 00 	lds	r22, 0x00C2	; 0x8000c2 <__data_end>
 82c:	70 91 c3 00 	lds	r23, 0x00C3	; 0x8000c3 <__data_end+0x1>
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatunsisf>
 838:	a7 01       	movw	r20, r14
 83a:	96 01       	movw	r18, r12
 83c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__mulsf3>
 840:	0e 94 c9 04 	call	0x992	; 0x992 <__fixunssfsi>
 844:	7b bd       	out	0x2b, r23	; 43
 846:	6a bd       	out	0x2a, r22	; 42
			break;
 848:	1c c0       	rjmp	.+56     	; 0x882 <__stack+0x23>
			case PWM_LOW:
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) ((DutyCycle / 100.0) * gu16TimerTopValue);
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatunsisf>
 852:	20 e0       	ldi	r18, 0x00	; 0
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	48 ec       	ldi	r20, 0xC8	; 200
 858:	52 e4       	ldi	r21, 0x42	; 66
 85a:	0e 94 57 04 	call	0x8ae	; 0x8ae <__divsf3>
 85e:	6b 01       	movw	r12, r22
 860:	7c 01       	movw	r14, r24
 862:	60 91 c2 00 	lds	r22, 0x00C2	; 0x8000c2 <__data_end>
 866:	70 91 c3 00 	lds	r23, 0x00C3	; 0x8000c3 <__data_end+0x1>
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatunsisf>
 872:	a7 01       	movw	r20, r14
 874:	96 01       	movw	r18, r12
 876:	0e 94 86 05 	call	0xb0c	; 0xb0c <__mulsf3>
 87a:	0e 94 c9 04 	call	0x992	; 0x992 <__fixunssfsi>
 87e:	7b bd       	out	0x2b, r23	; 43
 880:	6a bd       	out	0x2a, r22	; 42
		case PWM_CHANNEL_2:
		break;
		default:
		break;
	}
 882:	ff 90       	pop	r15
 884:	ef 90       	pop	r14
 886:	df 90       	pop	r13
 888:	cf 90       	pop	r12
 88a:	08 95       	ret

0000088c <UART_INIT>:
{
	UDR = chr;
	while(Get_Bit(UCSRA, 5) == 0);
}
void UART_Tx_String(Uint8* str)
{
 88c:	81 b3       	in	r24, 0x11	; 17
 88e:	8e 7f       	andi	r24, 0xFE	; 254
 890:	81 bb       	out	0x11, r24	; 17
 892:	81 b3       	in	r24, 0x11	; 17
 894:	82 60       	ori	r24, 0x02	; 2
 896:	81 bb       	out	0x11, r24	; 17
 898:	88 e1       	ldi	r24, 0x18	; 24
 89a:	8a b9       	out	0x0a, r24	; 10
 89c:	86 ea       	ldi	r24, 0xA6	; 166
 89e:	80 bd       	out	0x20, r24	; 32
 8a0:	89 e1       	ldi	r24, 0x19	; 25
 8a2:	89 b9       	out	0x09, r24	; 9
 8a4:	08 95       	ret

000008a6 <UART_Rx>:

}
Uint8 UART_Rx(void)
{
	Uint8 received_data = 0;
	while(Get_Bit(UCSRA, 7) == 0);
 8a6:	5f 9b       	sbis	0x0b, 7	; 11
 8a8:	fe cf       	rjmp	.-4      	; 0x8a6 <UART_Rx>
	received_data = UDR;
 8aa:	8c b1       	in	r24, 0x0c	; 12
	return received_data;
 8ac:	08 95       	ret

000008ae <__divsf3>:
 8ae:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__divsf3x>
 8b2:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__fp_round>
 8b6:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_pscB>
 8ba:	58 f0       	brcs	.+22     	; 0x8d2 <__divsf3+0x24>
 8bc:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fp_pscA>
 8c0:	40 f0       	brcs	.+16     	; 0x8d2 <__divsf3+0x24>
 8c2:	29 f4       	brne	.+10     	; 0x8ce <__divsf3+0x20>
 8c4:	5f 3f       	cpi	r21, 0xFF	; 255
 8c6:	29 f0       	breq	.+10     	; 0x8d2 <__divsf3+0x24>
 8c8:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_inf>
 8cc:	51 11       	cpse	r21, r1
 8ce:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_szero>
 8d2:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_nan>

000008d6 <__divsf3x>:
 8d6:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_split3>
 8da:	68 f3       	brcs	.-38     	; 0x8b6 <__divsf3+0x8>

000008dc <__divsf3_pse>:
 8dc:	99 23       	and	r25, r25
 8de:	b1 f3       	breq	.-20     	; 0x8cc <__divsf3+0x1e>
 8e0:	55 23       	and	r21, r21
 8e2:	91 f3       	breq	.-28     	; 0x8c8 <__divsf3+0x1a>
 8e4:	95 1b       	sub	r25, r21
 8e6:	55 0b       	sbc	r21, r21
 8e8:	bb 27       	eor	r27, r27
 8ea:	aa 27       	eor	r26, r26
 8ec:	62 17       	cp	r22, r18
 8ee:	73 07       	cpc	r23, r19
 8f0:	84 07       	cpc	r24, r20
 8f2:	38 f0       	brcs	.+14     	; 0x902 <__divsf3_pse+0x26>
 8f4:	9f 5f       	subi	r25, 0xFF	; 255
 8f6:	5f 4f       	sbci	r21, 0xFF	; 255
 8f8:	22 0f       	add	r18, r18
 8fa:	33 1f       	adc	r19, r19
 8fc:	44 1f       	adc	r20, r20
 8fe:	aa 1f       	adc	r26, r26
 900:	a9 f3       	breq	.-22     	; 0x8ec <__divsf3_pse+0x10>
 902:	35 d0       	rcall	.+106    	; 0x96e <__divsf3_pse+0x92>
 904:	0e 2e       	mov	r0, r30
 906:	3a f0       	brmi	.+14     	; 0x916 <__divsf3_pse+0x3a>
 908:	e0 e8       	ldi	r30, 0x80	; 128
 90a:	32 d0       	rcall	.+100    	; 0x970 <__divsf3_pse+0x94>
 90c:	91 50       	subi	r25, 0x01	; 1
 90e:	50 40       	sbci	r21, 0x00	; 0
 910:	e6 95       	lsr	r30
 912:	00 1c       	adc	r0, r0
 914:	ca f7       	brpl	.-14     	; 0x908 <__divsf3_pse+0x2c>
 916:	2b d0       	rcall	.+86     	; 0x96e <__divsf3_pse+0x92>
 918:	fe 2f       	mov	r31, r30
 91a:	29 d0       	rcall	.+82     	; 0x96e <__divsf3_pse+0x92>
 91c:	66 0f       	add	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	bb 1f       	adc	r27, r27
 924:	26 17       	cp	r18, r22
 926:	37 07       	cpc	r19, r23
 928:	48 07       	cpc	r20, r24
 92a:	ab 07       	cpc	r26, r27
 92c:	b0 e8       	ldi	r27, 0x80	; 128
 92e:	09 f0       	breq	.+2      	; 0x932 <__divsf3_pse+0x56>
 930:	bb 0b       	sbc	r27, r27
 932:	80 2d       	mov	r24, r0
 934:	bf 01       	movw	r22, r30
 936:	ff 27       	eor	r31, r31
 938:	93 58       	subi	r25, 0x83	; 131
 93a:	5f 4f       	sbci	r21, 0xFF	; 255
 93c:	3a f0       	brmi	.+14     	; 0x94c <__divsf3_pse+0x70>
 93e:	9e 3f       	cpi	r25, 0xFE	; 254
 940:	51 05       	cpc	r21, r1
 942:	78 f0       	brcs	.+30     	; 0x962 <__divsf3_pse+0x86>
 944:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_inf>
 948:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_szero>
 94c:	5f 3f       	cpi	r21, 0xFF	; 255
 94e:	e4 f3       	brlt	.-8      	; 0x948 <__divsf3_pse+0x6c>
 950:	98 3e       	cpi	r25, 0xE8	; 232
 952:	d4 f3       	brlt	.-12     	; 0x948 <__divsf3_pse+0x6c>
 954:	86 95       	lsr	r24
 956:	77 95       	ror	r23
 958:	67 95       	ror	r22
 95a:	b7 95       	ror	r27
 95c:	f7 95       	ror	r31
 95e:	9f 5f       	subi	r25, 0xFF	; 255
 960:	c9 f7       	brne	.-14     	; 0x954 <__divsf3_pse+0x78>
 962:	88 0f       	add	r24, r24
 964:	91 1d       	adc	r25, r1
 966:	96 95       	lsr	r25
 968:	87 95       	ror	r24
 96a:	97 f9       	bld	r25, 7
 96c:	08 95       	ret
 96e:	e1 e0       	ldi	r30, 0x01	; 1
 970:	66 0f       	add	r22, r22
 972:	77 1f       	adc	r23, r23
 974:	88 1f       	adc	r24, r24
 976:	bb 1f       	adc	r27, r27
 978:	62 17       	cp	r22, r18
 97a:	73 07       	cpc	r23, r19
 97c:	84 07       	cpc	r24, r20
 97e:	ba 07       	cpc	r27, r26
 980:	20 f0       	brcs	.+8      	; 0x98a <__divsf3_pse+0xae>
 982:	62 1b       	sub	r22, r18
 984:	73 0b       	sbc	r23, r19
 986:	84 0b       	sbc	r24, r20
 988:	ba 0b       	sbc	r27, r26
 98a:	ee 1f       	adc	r30, r30
 98c:	88 f7       	brcc	.-30     	; 0x970 <__divsf3_pse+0x94>
 98e:	e0 95       	com	r30
 990:	08 95       	ret

00000992 <__fixunssfsi>:
 992:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_splitA>
 996:	88 f0       	brcs	.+34     	; 0x9ba <__fixunssfsi+0x28>
 998:	9f 57       	subi	r25, 0x7F	; 127
 99a:	98 f0       	brcs	.+38     	; 0x9c2 <__fixunssfsi+0x30>
 99c:	b9 2f       	mov	r27, r25
 99e:	99 27       	eor	r25, r25
 9a0:	b7 51       	subi	r27, 0x17	; 23
 9a2:	b0 f0       	brcs	.+44     	; 0x9d0 <__fixunssfsi+0x3e>
 9a4:	e1 f0       	breq	.+56     	; 0x9de <__fixunssfsi+0x4c>
 9a6:	66 0f       	add	r22, r22
 9a8:	77 1f       	adc	r23, r23
 9aa:	88 1f       	adc	r24, r24
 9ac:	99 1f       	adc	r25, r25
 9ae:	1a f0       	brmi	.+6      	; 0x9b6 <__fixunssfsi+0x24>
 9b0:	ba 95       	dec	r27
 9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__fixunssfsi+0x14>
 9b4:	14 c0       	rjmp	.+40     	; 0x9de <__fixunssfsi+0x4c>
 9b6:	b1 30       	cpi	r27, 0x01	; 1
 9b8:	91 f0       	breq	.+36     	; 0x9de <__fixunssfsi+0x4c>
 9ba:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_zero>
 9be:	b1 e0       	ldi	r27, 0x01	; 1
 9c0:	08 95       	ret
 9c2:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_zero>
 9c6:	67 2f       	mov	r22, r23
 9c8:	78 2f       	mov	r23, r24
 9ca:	88 27       	eor	r24, r24
 9cc:	b8 5f       	subi	r27, 0xF8	; 248
 9ce:	39 f0       	breq	.+14     	; 0x9de <__fixunssfsi+0x4c>
 9d0:	b9 3f       	cpi	r27, 0xF9	; 249
 9d2:	cc f3       	brlt	.-14     	; 0x9c6 <__fixunssfsi+0x34>
 9d4:	86 95       	lsr	r24
 9d6:	77 95       	ror	r23
 9d8:	67 95       	ror	r22
 9da:	b3 95       	inc	r27
 9dc:	d9 f7       	brne	.-10     	; 0x9d4 <__fixunssfsi+0x42>
 9de:	3e f4       	brtc	.+14     	; 0x9ee <__fixunssfsi+0x5c>
 9e0:	90 95       	com	r25
 9e2:	80 95       	com	r24
 9e4:	70 95       	com	r23
 9e6:	61 95       	neg	r22
 9e8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ea:	8f 4f       	sbci	r24, 0xFF	; 255
 9ec:	9f 4f       	sbci	r25, 0xFF	; 255
 9ee:	08 95       	ret

000009f0 <__floatunsisf>:
 9f0:	e8 94       	clt
 9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__floatsisf+0x12>

000009f4 <__floatsisf>:
 9f4:	97 fb       	bst	r25, 7
 9f6:	3e f4       	brtc	.+14     	; 0xa06 <__floatsisf+0x12>
 9f8:	90 95       	com	r25
 9fa:	80 95       	com	r24
 9fc:	70 95       	com	r23
 9fe:	61 95       	neg	r22
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	8f 4f       	sbci	r24, 0xFF	; 255
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	99 23       	and	r25, r25
 a08:	a9 f0       	breq	.+42     	; 0xa34 <__floatsisf+0x40>
 a0a:	f9 2f       	mov	r31, r25
 a0c:	96 e9       	ldi	r25, 0x96	; 150
 a0e:	bb 27       	eor	r27, r27
 a10:	93 95       	inc	r25
 a12:	f6 95       	lsr	r31
 a14:	87 95       	ror	r24
 a16:	77 95       	ror	r23
 a18:	67 95       	ror	r22
 a1a:	b7 95       	ror	r27
 a1c:	f1 11       	cpse	r31, r1
 a1e:	f8 cf       	rjmp	.-16     	; 0xa10 <__floatsisf+0x1c>
 a20:	fa f4       	brpl	.+62     	; 0xa60 <__floatsisf+0x6c>
 a22:	bb 0f       	add	r27, r27
 a24:	11 f4       	brne	.+4      	; 0xa2a <__floatsisf+0x36>
 a26:	60 ff       	sbrs	r22, 0
 a28:	1b c0       	rjmp	.+54     	; 0xa60 <__floatsisf+0x6c>
 a2a:	6f 5f       	subi	r22, 0xFF	; 255
 a2c:	7f 4f       	sbci	r23, 0xFF	; 255
 a2e:	8f 4f       	sbci	r24, 0xFF	; 255
 a30:	9f 4f       	sbci	r25, 0xFF	; 255
 a32:	16 c0       	rjmp	.+44     	; 0xa60 <__floatsisf+0x6c>
 a34:	88 23       	and	r24, r24
 a36:	11 f0       	breq	.+4      	; 0xa3c <__floatsisf+0x48>
 a38:	96 e9       	ldi	r25, 0x96	; 150
 a3a:	11 c0       	rjmp	.+34     	; 0xa5e <__floatsisf+0x6a>
 a3c:	77 23       	and	r23, r23
 a3e:	21 f0       	breq	.+8      	; 0xa48 <__floatsisf+0x54>
 a40:	9e e8       	ldi	r25, 0x8E	; 142
 a42:	87 2f       	mov	r24, r23
 a44:	76 2f       	mov	r23, r22
 a46:	05 c0       	rjmp	.+10     	; 0xa52 <__floatsisf+0x5e>
 a48:	66 23       	and	r22, r22
 a4a:	71 f0       	breq	.+28     	; 0xa68 <__floatsisf+0x74>
 a4c:	96 e8       	ldi	r25, 0x86	; 134
 a4e:	86 2f       	mov	r24, r22
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	60 e0       	ldi	r22, 0x00	; 0
 a54:	2a f0       	brmi	.+10     	; 0xa60 <__floatsisf+0x6c>
 a56:	9a 95       	dec	r25
 a58:	66 0f       	add	r22, r22
 a5a:	77 1f       	adc	r23, r23
 a5c:	88 1f       	adc	r24, r24
 a5e:	da f7       	brpl	.-10     	; 0xa56 <__floatsisf+0x62>
 a60:	88 0f       	add	r24, r24
 a62:	96 95       	lsr	r25
 a64:	87 95       	ror	r24
 a66:	97 f9       	bld	r25, 7
 a68:	08 95       	ret

00000a6a <__fp_inf>:
 a6a:	97 f9       	bld	r25, 7
 a6c:	9f 67       	ori	r25, 0x7F	; 127
 a6e:	80 e8       	ldi	r24, 0x80	; 128
 a70:	70 e0       	ldi	r23, 0x00	; 0
 a72:	60 e0       	ldi	r22, 0x00	; 0
 a74:	08 95       	ret

00000a76 <__fp_nan>:
 a76:	9f ef       	ldi	r25, 0xFF	; 255
 a78:	80 ec       	ldi	r24, 0xC0	; 192
 a7a:	08 95       	ret

00000a7c <__fp_pscA>:
 a7c:	00 24       	eor	r0, r0
 a7e:	0a 94       	dec	r0
 a80:	16 16       	cp	r1, r22
 a82:	17 06       	cpc	r1, r23
 a84:	18 06       	cpc	r1, r24
 a86:	09 06       	cpc	r0, r25
 a88:	08 95       	ret

00000a8a <__fp_pscB>:
 a8a:	00 24       	eor	r0, r0
 a8c:	0a 94       	dec	r0
 a8e:	12 16       	cp	r1, r18
 a90:	13 06       	cpc	r1, r19
 a92:	14 06       	cpc	r1, r20
 a94:	05 06       	cpc	r0, r21
 a96:	08 95       	ret

00000a98 <__fp_round>:
 a98:	09 2e       	mov	r0, r25
 a9a:	03 94       	inc	r0
 a9c:	00 0c       	add	r0, r0
 a9e:	11 f4       	brne	.+4      	; 0xaa4 <__fp_round+0xc>
 aa0:	88 23       	and	r24, r24
 aa2:	52 f0       	brmi	.+20     	; 0xab8 <__fp_round+0x20>
 aa4:	bb 0f       	add	r27, r27
 aa6:	40 f4       	brcc	.+16     	; 0xab8 <__fp_round+0x20>
 aa8:	bf 2b       	or	r27, r31
 aaa:	11 f4       	brne	.+4      	; 0xab0 <__fp_round+0x18>
 aac:	60 ff       	sbrs	r22, 0
 aae:	04 c0       	rjmp	.+8      	; 0xab8 <__fp_round+0x20>
 ab0:	6f 5f       	subi	r22, 0xFF	; 255
 ab2:	7f 4f       	sbci	r23, 0xFF	; 255
 ab4:	8f 4f       	sbci	r24, 0xFF	; 255
 ab6:	9f 4f       	sbci	r25, 0xFF	; 255
 ab8:	08 95       	ret

00000aba <__fp_split3>:
 aba:	57 fd       	sbrc	r21, 7
 abc:	90 58       	subi	r25, 0x80	; 128
 abe:	44 0f       	add	r20, r20
 ac0:	55 1f       	adc	r21, r21
 ac2:	59 f0       	breq	.+22     	; 0xada <__fp_splitA+0x10>
 ac4:	5f 3f       	cpi	r21, 0xFF	; 255
 ac6:	71 f0       	breq	.+28     	; 0xae4 <__fp_splitA+0x1a>
 ac8:	47 95       	ror	r20

00000aca <__fp_splitA>:
 aca:	88 0f       	add	r24, r24
 acc:	97 fb       	bst	r25, 7
 ace:	99 1f       	adc	r25, r25
 ad0:	61 f0       	breq	.+24     	; 0xaea <__fp_splitA+0x20>
 ad2:	9f 3f       	cpi	r25, 0xFF	; 255
 ad4:	79 f0       	breq	.+30     	; 0xaf4 <__fp_splitA+0x2a>
 ad6:	87 95       	ror	r24
 ad8:	08 95       	ret
 ada:	12 16       	cp	r1, r18
 adc:	13 06       	cpc	r1, r19
 ade:	14 06       	cpc	r1, r20
 ae0:	55 1f       	adc	r21, r21
 ae2:	f2 cf       	rjmp	.-28     	; 0xac8 <__fp_split3+0xe>
 ae4:	46 95       	lsr	r20
 ae6:	f1 df       	rcall	.-30     	; 0xaca <__fp_splitA>
 ae8:	08 c0       	rjmp	.+16     	; 0xafa <__fp_splitA+0x30>
 aea:	16 16       	cp	r1, r22
 aec:	17 06       	cpc	r1, r23
 aee:	18 06       	cpc	r1, r24
 af0:	99 1f       	adc	r25, r25
 af2:	f1 cf       	rjmp	.-30     	; 0xad6 <__fp_splitA+0xc>
 af4:	86 95       	lsr	r24
 af6:	71 05       	cpc	r23, r1
 af8:	61 05       	cpc	r22, r1
 afa:	08 94       	sec
 afc:	08 95       	ret

00000afe <__fp_zero>:
 afe:	e8 94       	clt

00000b00 <__fp_szero>:
 b00:	bb 27       	eor	r27, r27
 b02:	66 27       	eor	r22, r22
 b04:	77 27       	eor	r23, r23
 b06:	cb 01       	movw	r24, r22
 b08:	97 f9       	bld	r25, 7
 b0a:	08 95       	ret

00000b0c <__mulsf3>:
 b0c:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulsf3x>
 b10:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__fp_round>
 b14:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fp_pscA>
 b18:	38 f0       	brcs	.+14     	; 0xb28 <__mulsf3+0x1c>
 b1a:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_pscB>
 b1e:	20 f0       	brcs	.+8      	; 0xb28 <__mulsf3+0x1c>
 b20:	95 23       	and	r25, r21
 b22:	11 f0       	breq	.+4      	; 0xb28 <__mulsf3+0x1c>
 b24:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_inf>
 b28:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_nan>
 b2c:	11 24       	eor	r1, r1
 b2e:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_szero>

00000b32 <__mulsf3x>:
 b32:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_split3>
 b36:	70 f3       	brcs	.-36     	; 0xb14 <__mulsf3+0x8>

00000b38 <__mulsf3_pse>:
 b38:	95 9f       	mul	r25, r21
 b3a:	c1 f3       	breq	.-16     	; 0xb2c <__mulsf3+0x20>
 b3c:	95 0f       	add	r25, r21
 b3e:	50 e0       	ldi	r21, 0x00	; 0
 b40:	55 1f       	adc	r21, r21
 b42:	62 9f       	mul	r22, r18
 b44:	f0 01       	movw	r30, r0
 b46:	72 9f       	mul	r23, r18
 b48:	bb 27       	eor	r27, r27
 b4a:	f0 0d       	add	r31, r0
 b4c:	b1 1d       	adc	r27, r1
 b4e:	63 9f       	mul	r22, r19
 b50:	aa 27       	eor	r26, r26
 b52:	f0 0d       	add	r31, r0
 b54:	b1 1d       	adc	r27, r1
 b56:	aa 1f       	adc	r26, r26
 b58:	64 9f       	mul	r22, r20
 b5a:	66 27       	eor	r22, r22
 b5c:	b0 0d       	add	r27, r0
 b5e:	a1 1d       	adc	r26, r1
 b60:	66 1f       	adc	r22, r22
 b62:	82 9f       	mul	r24, r18
 b64:	22 27       	eor	r18, r18
 b66:	b0 0d       	add	r27, r0
 b68:	a1 1d       	adc	r26, r1
 b6a:	62 1f       	adc	r22, r18
 b6c:	73 9f       	mul	r23, r19
 b6e:	b0 0d       	add	r27, r0
 b70:	a1 1d       	adc	r26, r1
 b72:	62 1f       	adc	r22, r18
 b74:	83 9f       	mul	r24, r19
 b76:	a0 0d       	add	r26, r0
 b78:	61 1d       	adc	r22, r1
 b7a:	22 1f       	adc	r18, r18
 b7c:	74 9f       	mul	r23, r20
 b7e:	33 27       	eor	r19, r19
 b80:	a0 0d       	add	r26, r0
 b82:	61 1d       	adc	r22, r1
 b84:	23 1f       	adc	r18, r19
 b86:	84 9f       	mul	r24, r20
 b88:	60 0d       	add	r22, r0
 b8a:	21 1d       	adc	r18, r1
 b8c:	82 2f       	mov	r24, r18
 b8e:	76 2f       	mov	r23, r22
 b90:	6a 2f       	mov	r22, r26
 b92:	11 24       	eor	r1, r1
 b94:	9f 57       	subi	r25, 0x7F	; 127
 b96:	50 40       	sbci	r21, 0x00	; 0
 b98:	9a f0       	brmi	.+38     	; 0xbc0 <__mulsf3_pse+0x88>
 b9a:	f1 f0       	breq	.+60     	; 0xbd8 <__mulsf3_pse+0xa0>
 b9c:	88 23       	and	r24, r24
 b9e:	4a f0       	brmi	.+18     	; 0xbb2 <__mulsf3_pse+0x7a>
 ba0:	ee 0f       	add	r30, r30
 ba2:	ff 1f       	adc	r31, r31
 ba4:	bb 1f       	adc	r27, r27
 ba6:	66 1f       	adc	r22, r22
 ba8:	77 1f       	adc	r23, r23
 baa:	88 1f       	adc	r24, r24
 bac:	91 50       	subi	r25, 0x01	; 1
 bae:	50 40       	sbci	r21, 0x00	; 0
 bb0:	a9 f7       	brne	.-22     	; 0xb9c <__mulsf3_pse+0x64>
 bb2:	9e 3f       	cpi	r25, 0xFE	; 254
 bb4:	51 05       	cpc	r21, r1
 bb6:	80 f0       	brcs	.+32     	; 0xbd8 <__mulsf3_pse+0xa0>
 bb8:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_inf>
 bbc:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_szero>
 bc0:	5f 3f       	cpi	r21, 0xFF	; 255
 bc2:	e4 f3       	brlt	.-8      	; 0xbbc <__mulsf3_pse+0x84>
 bc4:	98 3e       	cpi	r25, 0xE8	; 232
 bc6:	d4 f3       	brlt	.-12     	; 0xbbc <__mulsf3_pse+0x84>
 bc8:	86 95       	lsr	r24
 bca:	77 95       	ror	r23
 bcc:	67 95       	ror	r22
 bce:	b7 95       	ror	r27
 bd0:	f7 95       	ror	r31
 bd2:	e7 95       	ror	r30
 bd4:	9f 5f       	subi	r25, 0xFF	; 255
 bd6:	c1 f7       	brne	.-16     	; 0xbc8 <__mulsf3_pse+0x90>
 bd8:	fe 2b       	or	r31, r30
 bda:	88 0f       	add	r24, r24
 bdc:	91 1d       	adc	r25, r1
 bde:	96 95       	lsr	r25
 be0:	87 95       	ror	r24
 be2:	97 f9       	bld	r25, 7
 be4:	08 95       	ret

00000be6 <__umulhisi3>:
 be6:	a2 9f       	mul	r26, r18
 be8:	b0 01       	movw	r22, r0
 bea:	b3 9f       	mul	r27, r19
 bec:	c0 01       	movw	r24, r0
 bee:	a3 9f       	mul	r26, r19
 bf0:	70 0d       	add	r23, r0
 bf2:	81 1d       	adc	r24, r1
 bf4:	11 24       	eor	r1, r1
 bf6:	91 1d       	adc	r25, r1
 bf8:	b2 9f       	mul	r27, r18
 bfa:	70 0d       	add	r23, r0
 bfc:	81 1d       	adc	r24, r1
 bfe:	11 24       	eor	r1, r1
 c00:	91 1d       	adc	r25, r1
 c02:	08 95       	ret

00000c04 <_exit>:
 c04:	f8 94       	cli

00000c06 <__stop_program>:
 c06:	ff cf       	rjmp	.-2      	; 0xc06 <__stop_program>
